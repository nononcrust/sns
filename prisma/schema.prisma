generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  nickname     String  @unique
  profileImage String?
  role         Role    @default(USER)

  credentials   Credentials?
  googleAccount GoogleAccount?
  kakaoAccount  KakaoAccount?

  posts Post[]
  comments Comment[]
  likes Like[]
  bookmarks Bookmark[]
  followers Follow[] @relation("FollowFollowing")
  followings Follow[] @relation("FollowFollower")
  notifications Notification[]

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model Credentials {
  id       String @id @default(cuid())
  password String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model GoogleAccount {
  id       String @id @default(cuid())
  googleId String @unique

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model KakaoAccount {
  id      String @id @default(cuid())
  kakaoId String @unique

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String
  view    Int    @default(0)

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  tags PostTag[]
  comments Comment[]
  likes Like[]
  bookmarks Bookmark[]

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model Tag {
  id   String @id @default(cuid())
  name String @unique

  posts PostTag[]
}

model PostTag {
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  @@id([postId, tagId])
}

model Like {
  id    String @id @default(cuid())

  post Post @relation(fields: [postId], references: [id])
  postId String

  user User @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now()) @db.Timestamptz()

  @@unique ([postId, userId])
}

model Comment {
  id      String @id @default(cuid())
  content String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model Follow {
  id      String @id @default(cuid())

  follower User @relation("FollowFollowing", fields: [followerId], references: [id])
  followerId String

  following User @relation("FollowFollower", fields: [followingId], references: [id])
  followingId String

  createdAt DateTime @default(now()) @db.Timestamptz()

  @@unique ([followerId, followingId])
}

model Notification {
  id      String @id @default(cuid())
  content String
  type    NotificationType
  read    Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now()) @db.Timestamptz()
}

model Bookmark {
  id      String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  createdAt DateTime @default(now()) @db.Timestamptz()

  @@unique ([userId, postId])
}

enum Role {
  USER
  ADMIN
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}